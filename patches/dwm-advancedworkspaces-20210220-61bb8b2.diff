diff --git a/config.def.h b/config.def.h
index 1c0b587..062cc61 100644
--- a/config.def.h
+++ b/config.def.h
@@ -43,6 +43,8 @@ static const Layout layouts[] = {
 	{ "[M]",      monocle },
 };
 
+static Workspace workspaces[4];
+
 /* key definitions */
 #define MODKEY Mod1Mask
 #define TAGKEYS(KEY,TAG) \
@@ -84,6 +86,9 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,                       XK_w,      workspace,      {.i = 0} },
+	{ MODKEY,                       XK_q,      cycleworkspace, {.i = -1} },
+	{ MODKEY,                       XK_e,      cycleworkspace, {.i = +1} },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/dwm.c b/dwm.c
index 664c527..200d361 100644
--- a/dwm.c
+++ b/dwm.c
@@ -48,8 +48,8 @@
 #define BUTTONMASK              (ButtonPressMask|ButtonReleaseMask)
 #define CLEANMASK(mask)         (mask & ~(numlockmask|LockMask) & (ShiftMask|ControlMask|Mod1Mask|Mod2Mask|Mod3Mask|Mod4Mask|Mod5Mask))
 #define INTERSECT(x,y,w,h,m)    (MAX(0, MIN((x)+(w),(m)->wx+(m)->ww) - MAX((x),(m)->wx)) \
-                               * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
-#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]))
+	                           * MAX(0, MIN((y)+(h),(m)->wy+(m)->wh) - MAX((y),(m)->wy)))
+#define ISVISIBLE(C)            ((C->tags & C->mon->tagset[C->mon->seltags]) && (C->ws == C->mon->ws))
 #define LENGTH(X)               (sizeof X / sizeof X[0])
 #define MOUSEMASK               (BUTTONMASK|PointerMotionMask)
 #define WIDTH(X)                ((X)->w + 2 * (X)->bw)
@@ -84,6 +84,8 @@ typedef struct {
 
 typedef struct Monitor Monitor;
 typedef struct Client Client;
+typedef struct Workspace Workspace;
+
 struct Client {
 	char name[256];
 	float mina, maxa;
@@ -96,6 +98,7 @@ struct Client {
 	Client *next;
 	Client *snext;
 	Monitor *mon;
+	int ws;
 	Window win;
 };
 
@@ -130,6 +133,16 @@ struct Monitor {
 	Monitor *next;
 	Window barwin;
 	const Layout *lt[2];
+	int ws; /* Selected workspace */
+};
+
+struct Workspace {
+	float mfact;
+	int nmaster;
+	unsigned int seltags;
+	unsigned int sellt;
+	unsigned int tagset[2];
+	const Layout *lt[2];
 };
 
 typedef struct {
@@ -157,6 +170,7 @@ static void configure(Client *c);
 static void configurenotify(XEvent *e);
 static void configurerequest(XEvent *e);
 static Monitor *createmon(void);
+static void cycleworkspace(const Arg *arg);
 static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
@@ -204,6 +218,7 @@ static void setlayout(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
+static void setws(int ws);
 static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
@@ -230,6 +245,7 @@ static void updatewmhints(Client *c);
 static void view(const Arg *arg);
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
+static void workspace(const Arg *arg);
 static int xerror(Display *dpy, XErrorEvent *ee);
 static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
@@ -310,6 +326,7 @@ applyrules(Client *c)
 	if (ch.res_name)
 		XFree(ch.res_name);
 	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+	c->ws = c->mon->ws;
 }
 
 int
@@ -645,6 +662,13 @@ createmon(void)
 	return m;
 }
 
+void
+cycleworkspace(const Arg *arg)
+{
+    int nws = selmon->ws + arg->i;
+    setws(nws);
+}
+
 void
 destroynotify(XEvent *e)
 {
@@ -791,6 +815,8 @@ focus(Client *c)
 	if (c) {
 		if (c->mon != selmon)
 			selmon = c->mon;
+		if (c->ws != selmon->ws)
+			setws(c->ws);
 		if (c->isurgent)
 			seturgent(c, 0);
 		detachstack(c);
@@ -1035,6 +1061,7 @@ manage(Window w, XWindowAttributes *wa)
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
 		c->tags = t->tags;
+	    c->ws = t->mon->ws;
 	} else {
 		c->mon = selmon;
 		applyrules(c);
@@ -1611,6 +1638,39 @@ seturgent(Client *c, int urg)
 	XFree(wmh);
 }
 
+void
+setws(int nws)
+{
+	/* Save current screen configuration to workspace,
+	 * then set current workspace to workspaces[nws],
+	 * and switch the screen configuration appropriately. */
+	workspaces[selmon->ws].mfact = selmon->mfact;
+	workspaces[selmon->ws].nmaster = selmon->nmaster;
+	workspaces[selmon->ws].seltags = selmon->seltags;
+	workspaces[selmon->ws].sellt = selmon->sellt;
+	workspaces[selmon->ws].tagset[0] = selmon->tagset[0];
+	workspaces[selmon->ws].lt[0] = selmon->lt[0];
+	workspaces[selmon->ws].tagset[1] = selmon->tagset[1];
+	workspaces[selmon->ws].lt[1] = selmon->lt[1];
+
+	if (nws < LENGTH(workspaces) && nws >= 0)
+	    selmon->ws = nws;
+	if (workspaces[selmon->ws].tagset[0]) {
+	    /* Only set if the new workspace has a tagset
+	     * If it doesn't, just assume it's new/empty and don't bother. */
+	    selmon->mfact = workspaces[selmon->ws].mfact;
+	    selmon->nmaster = workspaces[selmon->ws].nmaster;
+	    selmon->seltags = workspaces[selmon->ws].seltags;
+	    selmon->sellt = workspaces[selmon->ws].sellt;
+	    selmon->tagset[0] = workspaces[selmon->ws].tagset[0];
+	    selmon->lt[0] = workspaces[selmon->ws].lt[0];
+	    selmon->tagset[1] = workspaces[selmon->ws].tagset[1];
+	    selmon->lt[1] = workspaces[selmon->ws].lt[1];
+	}
+	arrange(selmon);
+	focus(NULL);
+}
+
 void
 showhide(Client *c)
 {
@@ -2077,6 +2137,11 @@ wintomon(Window w)
 	return selmon;
 }
 
+void
+workspace(const Arg *arg) {
+	setws(arg->i);
+}
+
 /* There's no way to check accesses to destroyed windows, thus those cases are
  * ignored (especially on UnmapNotify's). Other types of errors call Xlibs
  * default error handler, which may call exit. */
